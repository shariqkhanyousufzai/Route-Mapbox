<!DOCTYPE html>
<html>
  <head>
    <meta charset='utf-8' />
    <title></title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.8.1/mapbox-gl.js'></script>
  <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.8.1/mapbox-gl.css' rel='stylesheet' />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
   integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
   crossorigin=""/>
   <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
   integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
   crossorigin=""></script>
    <style>
      body {
        margin: 0;
        padding: 0;
      }
      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div id='map'></div>
    <script>
    mapboxgl.accessToken = 'pk.eyJ1Ijoidm9sdHN3aXRjaCIsImEiOiJjanV0Y3dndmEwNjgxNGRscHA3emZwOHFpIn0.GygKTa9qyzWJ2V6vlWRj2A';
    var map = new mapboxgl.Map({
      container: 'map', 
      // style: 'mapbox://styles/mapbox/streets-v10',
      style: 'mapbox://styles/mapbox/streets-v10',
      center: [-98.215417,26.221717], // starting position
      zoom: 10
    });
    // set the bounds of the map
    var bounds = [[-123.069003, 45.395273], [-122.303707, 45.612333]];
    // map.setMaxBounds(bounds);

    // initialize the map canvas to interact with later
    var canvas = map.getCanvasContainer();
    var marker;
    // this is where the code for the next step will go
    var getLatlons = [[-97.531800,26.028750],[-97.532417,26.028917],[-97.532683,26.029100],[-97.534383,26.029183],[-97.534700,26.029233],[-97.534783,26.029267],[-97.536400,26.032700],[-97.561650,26.055950],[-97.582683,26.084383],[-97.618167,26.114383]];
    // console.log(getLatlons);
    // create a function to make a directions request
function getRoute(end,ranRoute) {
   marker = new mapboxgl.Marker()
      .setLngLat(end)
      .addTo(map);
  var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;
  // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
  var req = new XMLHttpRequest();
  req.responseType = 'json';
  req.open('GET', url, true);
  req.onload = function() {
    var data = req.response.routes[0];
    var route = data.geometry.coordinates;
    var geojson = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'LineString',
        coordinates: route
      }
    };
    // if the route already exists on the map, reset it using setData
    if (map.getSource(ranRoute)) {
      map.getSource(ranRoute).setData(geojson);
    } else { // otherwise, make a new request
      map.addLayer({
        id: ranRoute,
        type: 'line',
        source: {
          type: 'geojson',
          data: {
            type: 'Feature',
            properties: {},
            geometry: {
              type: 'LineString',
              coordinates: geojson
            }
          }
        },
        layout: {
          'line-join': 'round',
          'line-cap': 'round'
        },
        paint: {
          'line-color': '#bf2126',
          'line-width': 7,
          'line-opacity':1
        }
      });
    }
  };
  req.send();
}


function makeRoute(coords,ranRoute){
  // var coordsObj = e.lngLat;
  marker = new mapboxgl.Marker()
      .setLngLat(coords)
      .addTo(map);
  var coordsObj = {lng: coords[0], lat: coords[1]};
  canvas.style.cursor = '';
  var coords = Object.keys(coordsObj).map(function(key) {
    return coordsObj[key];
  });
  var end = {
    type: 'FeatureCollection',
    features: [{
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'Point',
        coordinates: coords
      }
    }
    ]
  };
  if (map.getLayer(ranRoute)) {
    map.getSource(ranRoute).setData(end);
  }  else {
    getRoute(coords,ranRoute);
  }
};

 countMapbox = getLatlons.length;
 holdValuesLatMapbox = 0; 
 var startCordinate;
 intervalMapbox = setInterval(function() {
    if (holdValuesLatMapbox == countMapbox-1 ) {
        clearInterval(intervalMapbox);
    }
      startCordinate = getLatlons[holdValuesLatMapbox];
    if (holdValuesLatMapbox < countMapbox) {
      getRoute(startCordinate,'route'+holdValuesLatMapbox);
      makeRoute(getLatlons[holdValuesLatMapbox],'route'+holdValuesLatMapbox);
      holdValuesLatMapbox++;
    }else{
      clearInterval(intervalMapbox);
    }
    
  },200);
    </script>
  </body>
</html>
